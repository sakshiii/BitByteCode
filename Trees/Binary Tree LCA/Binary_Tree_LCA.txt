/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    
    TreeNode fnode=null;
public ArrayList<Integer> findPath(TreeNode node,int d)
{
    if(node == null){
      return new ArrayList<>();
    }

    if(node.val == d){
      ArrayList<Integer> list = new ArrayList<>();
      list.add(node.val);
      return list;
    }

    ArrayList<Integer> llist = findPath(node.left, d);
    if(llist.size() > 0){
      llist.add(node.val);
      return llist;
    }

    ArrayList<Integer> rlist = findPath(node.right, d);
    if(rlist.size() > 0){
      rlist.add(node.val);
      return rlist;
    }

    return new ArrayList<>();
 }
    
    public void helper(TreeNode node,int v)
    {
        if(node==null)
            return ;
        
        if(node.val==v)
            fnode=node;
        
        if(node.left!=null)
         helper(node.left,v);
        
        if(node.right!=null)
        helper(node.right,v);
            
        
    }
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        
        ArrayList<Integer> ntrp1=findPath(root,p.val);
        ArrayList<Integer> ntrp2=findPath(root,q.val);
        
        
        int sub=ntrp1.size()>ntrp2.size()?ntrp1.size()-ntrp2.size() : ntrp2.size()-ntrp1.size();
        
        int s1=0;
        int s2=0;
        
          if(ntrp1.size()>ntrp2.size())
            s1+=sub;
        
        else 
            s2+=sub;
      
        
  
       while(ntrp1.get(s1)!=ntrp2.get(s2) && s1>=0 && s2>=0) 
        {
            s1++;
            s2++;
        }
  
       helper(root,ntrp2.get(s2));
       return fnode;
  
    }
}