class Solution {
    public List<List<Integer>> permute(int[] nums) {
        
        List<List<Integer>> res=new ArrayList<>();
        Arrays.sort(nums);
        boolean[] vis=new boolean[nums.length];
        perhelper(res,new ArrayList<>(),nums,vis);
        
        return res;
    }
    public void perhelper(List<List<Integer>> res,List<Integer> cur,int[] arr,boolean [] vis)
    {
        
        if(cur.size()==arr.length)
        {
            res.add(new ArrayList(cur));
            return;
        }
        //if i= idx then o/p will only be [[1,2,3]]
	//because then we dont look at every possibility of even after 1 being done
        for(int i=0;i<arr.length;i++)
        {
            if(vis[i]==true) continue;
            cur.add(arr[i]);
            vis[i]=true;
            perhelper(res,cur,arr,vis);
            cur.remove(cur.size()-1);
            vis[i]=false;
        }
    }
}