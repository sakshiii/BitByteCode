class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        
    List<String> ans=new ArrayList<>();
    Set<String> str=new HashSet<>();
   for(int k=0;k<words.length;k++){
       String word=words[k];
       for(int i=0;i<board.length;i++)
        {
            for(int j=0;j<board[0].length;j++)
            {
                    if(board[i][j]==word.charAt(0) && dfs(board,i,j,0,word))
                        str.add(word);
                
            }
        }
   }
        for(String s:str)
            ans.add(s);
        return ans;
    }
    
    public boolean dfs(char[][] board,int i, int j , int c, String word){
        
        if(c==word.length())
            return true;
        
        if(i<0 || i>=board.length || j<0 || j>=board[0].length || board[i][j]!=word.charAt(c))
            return false;
        
        char t=board[i][j];
        board[i][j]=' ';
boolean ans=( dfs(board,i+1,j,c+1,word) || dfs(board,i,j+1,c+1,word) || dfs(board,i-1,j,c+1,word) ||  dfs(board,i,j-1,c+1,word));
        board[i][j]=t;
        return ans;
    }
}